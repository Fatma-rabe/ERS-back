const Message = require("../models/message");
let onlineUsers = {};

function initChatSocket(io) {
  require("../middleware/socketAuth")(io); // ÿßÿ±ÿ®ÿ∑ socket middleware

  io.on("connection", (socket) => {
    console.log("‚ö° Connected:", socket.user.id);

    // ÿ≠ŸÅÿ∏ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸÉÿ£ŸàŸÜŸÑÿßŸäŸÜ
    onlineUsers[socket.user.id] = socket.id;

    // ÿ•ÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥ÿßŸÑÿ©
    socket.on("send_message", async (data) => {
      try {
        const { receiverId, message } = data;
        const senderId = socket.user.id; // ŸÖŸÜ ÿßŸÑÿ™ŸàŸÉŸÜ üëå
        console.log(socket.user.id)
        const newMessage = new Message({ senderId, receiverId, message });
        await newMessage.save();

        // ŸÑŸà ÿßŸÑŸÖÿ≥ÿ™ŸÑŸÖ ÿ£ŸàŸÜŸÑÿßŸäŸÜ ÿßÿ®ÿπÿ™ŸÑŸá
        const receiverSocket = onlineUsers[receiverId];
        if (receiverSocket) {
          io.to(receiverSocket).emit("receive_message", newMessage);
        }
      } catch (err) {
        console.error("‚ùå Error:", err.message);
      }
    });

    // ŸÇÿ∑ÿπ ÿßŸÑÿßÿ™ÿµÿßŸÑ
    socket.on("disconnect", () => {
      console.log("‚ùå Disconnected:", socket.id);
      for (let userId in onlineUsers) {
        if (onlineUsers[userId] === socket.id) {
          delete onlineUsers[userId];
          break;
        }
      }
    });
  });
}

module.exports = initChatSocket;
